<Comment>
lp3NodeTemplate

kokou ni-sui@sabaco

<I/O>
input MidiPacket : launchpadからの入力
output IntList : 描画情報。lpControlへの接続します。


<Description>
lpControlを使うNodeのテンプレート
押した部分の色が変わります。
最上位のボタンを押すとクリア。

※ノード単体では動きません。main_template.cppに、専用の定数・クラスを設定する必要があります。


<Parameter>
parameter Locate = 0 : 描画位置(0-6)
parameter Height = 4 : 描画範囲(2-8)

<Setup>
// Bung設定
${this}( &(Midiglue::__bang) , Midiglue::SETUP );

<Code>

/*********************************************
 * 定数
**********************************************/
static const uint8_t LOCATE_Y = ${Locate};  // 基準位置（縦）
static const uint8_t BOXSIZE_X = 8;         // サイズ（横）
static const uint8_t BOXSIZE_Y = ${Height}; // サイズ（縦）

/*********************************************
 * 変数
**********************************************/
// Launchpad 描画情報
static IntList mpDispLp3 = Midiglue::init_default<IntList>();
// LaunchPad入出力許可フラグ
static bool lpEnable = true;


/*********************************************
 * 関数
**********************************************/
/***********************************************************************
 * 共通処理
 ***********************************************************************/
/*****************
 * Launch pad への送信
 * @param data  出力したい描画情報
 * @param y 押されたボタンのy軸(0～1)
 */
static auto outLaunchPad = [&](){
    if(lpEnable)
    {
        // 出力
        out0 = mpDispLp3;
    }
};

/*****************
 * 表示のreDrow
 */
static auto reDrow = [&](){
    for(int y=0;y<BOXSIZE_Y;y++){
        // 指定した段の色を取得
        for(int x=0;x<BOXSIZE_X;x++){
            uint8_t color = LP3C_DK_GLAY;
            uint8_t mode = LP3B_NOMAL;
            // LP3への送信
            Lp3::addDot(mpDispLp3,mode,x,LOCATE_Y + y,color);
        }
    }
};

/***********************************************************************
* 初期化処理
 ***********************************************************************/
static auto initDrow = [&](){
    // Launchpadバッファのクリア
    mpDispLp3->clear();
    // LaunchPadへの送信バッファ設定
    reDrow();
    // 自動送信されないのでLaunchPadへの送信を行う
    outLaunchPad();
};

/*****************
 * LaunchPadからの入力
 * @param x 押されたボタンのX軸(0～8)
 * @param y 押されたボタンのy軸(0～8)
 * @param value value値
 */
static auto pushButtun = [&](uint8_t x,uint8_t y,uint8_t value){
    // Midiglue::Debug::write_log("inputProgramChange", x*10+y);
    // boxの範囲内であることを確認(縦)
    if(y < LOCATE_Y || y >= (LOCATE_Y + BOXSIZE_Y)){
        return;
    }
    // // y軸補正
    // y -= LOCATE_Y;

    // boxの範囲内であることを確認(横)
    if(x<LP3_maxXY){
        // LP3への送信
        Lp3::addDot(mpDispLp3,LP3B_FLASH,x,y,LP3C_YELLOW);
    }
    else { // ボックスの右側[>] が押されている。

    }

};

// 入力：LaunchPad
static auto inputLaunchPad = [&](MidiPacket packet){

    // LaunchPad制御制限されている場合、onイベントは無視する。
    // ※押しながら切り替えられる可能性があるため、offイベントは受ける
    if(!lpEnable && 0 < packet.getControlValue())
    {   return; }

    // LaunchPadからの入力
    // 押された場所の取得
    static uint8_t x;
    static uint8_t y;
    if(Lp3::getLocation(packet,&x,&y)){
        // 最上段のボタンクリック
        reDrow();
    }else {
        // そのほかのボタン
        pushButtun(x,y,packet.getControlValue());
    };


};

/*********************************************
* 割り込みイベント
**********************************************/
// LaunchPadの初期表示
static auto initEvent = Midiglue::make_oneshot_us_event<>(initDrow);

/*********************************************
* 実行処理
**********************************************/

// バッファクリア
mpDispLp3->clear();

// セットアップ
if (@setup){
    // 3秒後に初期表示処理を呼び出す
    initEvent->schedule(3000 * 1000);
}
else if (@in0) { // LaunchPadからの入力
    inputLaunchPad(in0);
}

// バッファがあればlaunchpadに送信
if(0<mpDispLp3->size()){
    outLaunchPad();
}
