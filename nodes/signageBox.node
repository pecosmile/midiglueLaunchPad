<Comment>
signageBox

kokou ni-sui@sabaco

<I/O>
input Int : LaunchPad制御（0=Disable、1～8で列が表示）
input MidiPacket : clock入力
input MidiPacket : ボタン入力情報(LaunchPad) 
input Int : bung(test)
input Int : step(test)
output IntList : 描画情報。lpControlへの接続します。


<Description>
電光掲示板代わりに使うやつ

※ノード単体では動きません。main_template.cppに、専用の定数・クラスを設定する必要があります。


<Parameter>

<Setup>
// Bung設定
${this}( &(Midiglue::__bang) , Midiglue::SETUP );

<Code>

/**********************
 * 定数
 **********************/
static const uint8_t LOCATE_Y = 0;  // 基準位置（縦）
static const uint8_t BOXSIZE_Y = 8;  // サイズ（縦）
static const uint8_t BOXSIZE_X = 8;  // サイズ（横）
static const uint8_t MAXLEFT = BOXSIZE_X-1;  // 一番右

static const Midiglue::MIDICCType CIRCUIT_VOLUME = (Midiglue::MIDICCType) 29;




// アルファベットデータ
// 90度右回転した状態でビット情報として持つ
static unsigned char SLA[]={
    0b01100000,
    0b10010100,
    0b10010100,
    0b11111000,
    0b00000000,
};

static unsigned char SLB[]={
    0b11111111,
    0b10010000,
    0b10010000,
    0b01100000,
    0b00000000,
};

static unsigned char SLC[]={
    0b01110000,
    0b10001000,
    0b10001000,
    0b01010000,
    0b00000000,
};

static unsigned char SLD[]={
    0b01100000,
    0b10010000,
    0b10010000,
    0b11111111,
    0b00000000,
};

static unsigned char SLE[]={
    0b01110000,
    0b10101000,
    0b10101000,
    0b00110000,
    0b00000000,
};

static unsigned char SLG[]={
    0b10011000,
    0b10100100,
    0b10100100,
    0b01111100,
    0b00000000,
};

static unsigned char SLI[]={
    0b11101000,
    0b00000000,
};

static unsigned char SLJ[]={
    0b10000000,
    0b10001000,
    0b01111010,
    0b00000000,
};

static unsigned char SLL[]={
    0b00000001,
    0b11111111,
    0b00000000,
};

static unsigned char SLN[]={
    0b11110000,
    0b00010000,
    0b00010000,
    0b11100000,
    0b00000000,
};

static unsigned char SLO[]={
    0b01110000,
    0b10001000,
    0b10001000,
    0b01110000,
    0b00000000,
};

static unsigned char SLP[]={
    0b11111100,
    0b00100010,
    0b00100010,
    0b00011100,
    0b00000000,
};

static unsigned char SLR[]={
    0b11111000,
    0b00010000,
    0b00001000,
    0b00001000,
    0b00000000,
};

static unsigned char SLT[]={
    0b00001000,
    0b01111111,
    0b10001000,
    0b00000000,
};

static unsigned char SLS[]={
    0b10010000,
    0b10101000,
    0b10101000,
    0b01001000,
    0b00000000,
};

static unsigned char S_UNDERB[]={
    0b10000000,
    0b10000000,
    0b10000000,
    0b10000000,
    0b00000000,
};

static unsigned char S_DOT[]={
    0b10000000,
    0b00000000,
};

// 文字設定
struct ST_CHARACTER{
    unsigned char*      character;  // 文字
    uint8_t             color;      // 文字色
};

static ST_CHARACTER mCharactors[] = {
    {   SLD     ,LP3C_L_YELLOW},
    {   SLI     ,LP3C_RED},
    {   SLG     ,LP3C_BPURPLE},
    {   SLI     ,LP3C_GREEN},
    {   SLL     ,LP3C_L_YELLOW},
    {   SLA     ,LP3C_BROWN},
    {   SLN     ,LP3C_GBLUE},
    {   SLD     ,LP3C_PURPLE},
    {   SLB     ,LP3C_BGREEN},
    {   SLE     ,LP3C_BROWN},
    {   SLA     ,LP3C_L_YELLOW},
    {   SLT     ,LP3C_PINK},
    {   SLS     ,LP3C_YGREEN},
    {   NULL    ,0},
};


static uint8_t mNoteColor[] = {
    LP3C_BROWN,
    LP3C_YELLOW,
    LP3C_BPURPLE,
    LP3C_LGREEN,
    LP3C_WRED,
    LP3C_GREEN,
    LP3C_BLUE,
    LP3C_PINK
};


/*********************************************
 * 変数
**********************************************/
// launchpadの表示状態
static uint8_t mScreenData[8][8];
// チャンネル毎の音量
static uint8_t mVolume[16];
// クロックの状態保持
static uint8_t mClock;
// Launchpad 描画情報
static IntList mpDispLp3 = Midiglue::init_default<IntList>();
// LaunchPad入出力許可フラグ
static uint8_t lpHight = 0;
// 現在表示中の文字
static uint8_t mTextNumber;
// ドット出力位置
static uint8_t mTextClumn;


/*********************************************
 * 関数
**********************************************/
/***********************************************************************
 * 共通処理
 ***********************************************************************/
/*****************
 * Launch pad への送信
 * @param data  出力したい描画情報
 * @param y 押されたボタンのy軸(0～1)
 */
static auto outLaunchPad = [&](){
    if(lpHight>0)
    {
        // 出力
        out0 = mpDispLp3;
    }
};


/*****************
 * addDot
 * 表示可能な列までのデータを送る
 */
static auto addDot = [&](IntList buff,uint8_t mode,uint8_t x,uint8_t y,uint8_t color){
    if(lpHight>y){
        Lp3::addDot(buff,mode,x,y,color);
    }
};

/*****************
 * 表示のreDrow(x)
 */
static auto reDrowX = [&](int y){
    for(int x=0;x<BOXSIZE_X;x++){
        // スクリーンデータの情報を渡す
        uint8_t color = mScreenData[x][y];
        uint8_t mode = LP3B_NOMAL;
        // LP3への送信
        addDot(mpDispLp3,mode,x,LOCATE_Y + y,color);
    }
};

/*****************
 * 表示のreDrow
 */
static auto reDrow = [&](){
    for(int y=0;y<BOXSIZE_Y;y++){
        reDrowX(y);
    }
};

/*****************
 * screen data設定
 * @param x 設定位置(0～8)
 * @param y 設定位置(0～8)
 * @param color 設定したい色
 */
static auto setScreenData = [&](uint8_t x,uint8_t y,uint8_t color){
    // 色に変更がある場合のみ
    if(!(mScreenData[x][y] == color)){
        // 色を設定
        mScreenData[x][y]= color;
        uint8_t mode = LP3B_NOMAL;
        // LP3への送信
        addDot(mpDispLp3,mode,x,y,color);
    }
};

/*****************
 * 文字表示のBit情報取得
 */
static auto getLight = [&](){

// 現在表示中の文字
    unsigned char line = 0b00000000;
    uint8_t textColor = LP3C_BLACK;

// 既に全ての文字を表示済みの場合は黒を設定
    if(mCharactors[mTextNumber].character != NULL){
        // 対応するテキスト・表示ラインの取得
         unsigned char* ch = (mCharactors[mTextNumber].character);
        textColor = mCharactors[mTextNumber].color;
        line = ch[mTextClumn];

//         Midiglue::Debug::write_log("mTextNumber:", mTextNumber);
//         Midiglue::Debug::write_log("mTextClumn", mTextClumn);

        // 次のラインを設定
        mTextClumn++;
        // 全ライン送信済み
        if(line == 0b00000000){
            mTextClumn = 0;
            mTextNumber++;
        }
    }

    // 結果のラインを送る
    // アルファベットデータを左回転させて、上から光点を決定するので、
    // BitShiftは1から左シフトする事になる。
    unsigned char mask = 0b00000001;
    for(int y=0;y<BOXSIZE_Y;y++){
        uint8_t color = (0 != (line & mask))?textColor:LP3C_BLACK;
        // データ更新
        mScreenData[MAXLEFT][y] = color;
        // LP3への送信
        addDot(mpDispLp3,LP3B_NOMAL,MAXLEFT,y,color);
        // 次のドット
        mask <<= 1;
    }


};

// 単位時間毎にドットを左に動かす
static auto timerFunction = [&](){
//    Midiglue::Debug::write_log("timerFunction", 0);
    for(int x=0;x<MAXLEFT;x++){
        for(int y=0;y<BOXSIZE_Y;y++){
            setScreenData(x,y,mScreenData[x+1][y]);
        }
    }
    // 一番右の列を描画
    getLight();
};

/***********************************************************************
* 初期化処理
 ***********************************************************************/
static auto initDrow = [&](){
    Midiglue::Debug::write_log("initDrow", 0);

    // スクリーンデータのクリア
    for(int y=0;y<BOXSIZE_Y;y++){
        for(int x=0;x<BOXSIZE_X;x++){
            mScreenData[x][y] = LP3C_BLACK;
        }
    }

    // volume初期化
    for(int i=0;i<16;i++){
        mVolume[i]=100;
    }

    // Launchpadバッファのクリア
    mpDispLp3->clear();
    // LaunchPadへの送信バッファ設定
    reDrow();
    // 自動送信されないのでLaunchPadへの送信を行う
    outLaunchPad();

    // 変数初期化
    // 現在表示中の文字
    mTextNumber = 0;
    // ドット出力位置
    mTextClumn = 0;

};

/*********
 * OnNote処理
 ********/
static auto funcOnNote = [&](MidiPacket packet){

// volumeが小さい時は光らないよ
    if(mVolume[packet.getChannel() - 1] < 3){
        return;
    }

// 光らせる位置と色を決める
    uint8_t y = ((packet.getChannel() -1 ) + mClock) & 7;
    // uint8_t y = ((packet.getChannel() -1 )) & 7;
    uint8_t color = mNoteColor[(packet.getChannel() -1 ) & 7];

    Midiglue::Debug::write_log("funcOnNote", color*10+y);

// 光点を送る（既に色が入っていたら処理なし）
    if(mScreenData[MAXLEFT][y] == LP3C_BLACK){
        setScreenData(MAXLEFT,y,color);
    }

};

/*********
 * ControlChange処理
 ********/
static auto funcControlChange = [&](MidiPacket packet){

    // volume操作
    if(packet.getControlNumber() == (uint8_t)CIRCUIT_VOLUME){
        // チャンネル毎の音量確認
        mVolume[packet.getChannel() - 1] = packet.getControlValue();

    }

};



/*********************************************
* 割り込みイベント
**********************************************/

// LaunchPadの初期表示
static auto initEvent = Midiglue::make_oneshot_us_event<>(initDrow);



/*********************************************
* 実行処理
**********************************************/

// バッファクリア
mpDispLp3->clear();

// セットアップ
if (@setup){
    // 3秒後に初期表示処理を呼び出す
    initEvent->schedule(3000 * 1000);
}
else if (@in0){ // Enable

    // 高さ設定
    uint8_t oldHight = lpHight;
    lpHight = in0;
    for(uint8_t y = oldHight; y < lpHight;y++){
        reDrowX(y);
    }
}
else if (@in1){
    if(in1.isTimingClock()){ // クロック入力
        mClock = (mClock+1) % 60;
        if((mClock % 6 ) == 0){
            timerFunction();
        }
    }
    else if(in1.isNoteOn())
    {
        // NoteOn
        funcOnNote(in1);
    }
    else if(in1.isControlChange())
    {
        // controlChange
        funcControlChange(in1);
    }
}
else if (@in2){
    // ■ LaunchPadからの入力
}
else if (@in3){
    if(in3!=0){
        // 現在表示中の文字
        mTextNumber = 0;
        // ドット出力位置
        mTextClumn = 0;
    }
}
else if (@in4){
    timerFunction();
}
// バッファがあればlaunchpadに送信
if(0<mpDispLp3->size()){
    outLaunchPad();
}
