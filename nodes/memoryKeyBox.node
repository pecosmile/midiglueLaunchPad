<Comment>
memoryKeyBox

kokou ni-sui@sabaco

<I/O>
input Int : LaunchPad制御（0=Disable）
input MidiPacket : launchpadからの入力
output IntList : launchpadへの出力
output MidiPacket : midi出力


<Description>
lpControlを使うNodeのテンプレート
押した部分の色が変わります。
最上位のボタンを押すとクリア。

※ノード単体では動きません。main_template.cppに、専用の定数・クラスを設定する必要があります。


<Parameter>
parameter Locate = 0 : 描画位置(0-6)
parameter DoubleKey = false : キーボードを2段にする。

<Setup>
// Bung設定
${this}( &(Midiglue::__bang) , Midiglue::SETUP );

<Code>

/*********************************************
 * 定数
**********************************************/
static const uint8_t LOCATE_Y = ${Locate};  // 基準位置（縦）
static const uint8_t BOXSIZE_X = 8;         // サイズ（横）

// メモリー描画用
static const uint8_t MAMORY_EMP = LP3C_BLACK;   // メモリーあり
static const uint8_t MAMORY_IN = LP3C_BLACK;    // メモリーなし

// キーボード描画用
static const uint8_t KEY_Z = LP3C_BLACK;    // キー（なし）
static const uint8_t KEY_A = LP3C_L_GREEN;  // メジャーキー
static const uint8_t KEY_B = LP3C_Y_GREEN;  // マイナーキー
static const uint8_t KEY_C = LP3C_GREEN;    // Cキー

/*********************************************
 * 変数
**********************************************/
// Launchpad 描画情報
static IntList mpDispLp3 = Midiglue::init_default<IntList>();
// LaunchPad入出力許可フラグ
static bool lpEnable = true;
// オクターブ
static bool mOctave = 4;

// code Memory
static const uint8_t mCodeMemory[8][4]; //TODO:init

// キーボード 
static const uint8_t mKeyColor[2][8] = {
    {KEY_Z,KEY_B,KEY_B,KEY_Z,KEY_B,KEY_B,KEY_B,KEY_Z},
    {KEY_C,KEY_A,KEY_A,KEY_A,KEY_A,KEY_A,KEY_A,KEY_C},
};

/*********************************************
 * 関数
**********************************************/
/***********************************************************************
 * 共通処理
 ***********************************************************************/
/*****************
 * Launch pad への送信
 * @param data  出力したい描画情報
 * @param y 押されたボタンのy軸(0～1)
 */
static auto outLaunchPad = [&](){
    if(lpEnable)
    {
        // 出力
        out0 = mpDispLp3;
    }
};

/*****************
 * 指定位置のカラー定数を返す
 * @param x     座標(x) → 0～7
 * @param y     座標(y) → 0～1（相対位置で指定）
 */
static auto getColor = [&](uint8_t x,uint8_t y) -> uint8_t {
    return(mKeyColor[y][x]);
};
/***********************************************************************
 * メモリー処理
 ***********************************************************************/


/*****************
 * count of memory
 * @param meory
 */
static auto memoryCount = [&](uint8_t* memory) -> uint8_t {
    uint8_t ret = 0;
    for(int i=0;i<MAX_MEMORY;i++){
        if(0<memory[i]){
            ret++;
        }
    }
    return(ret);
};

/*****************
 * add of memory
 * @param meory
 */
static auto memoryAdd = [&](uint8_t* memory,uint8_t note){
    // check
    for(int i=0;i<MAX_MEMORY;i++){
        if(note == memory[i]){
            return;
        }
    }
    // add
    for(int i=0;i<MAX_MEMORY;i++){
        if(0 == memory[i]){
            memory[i] = note;
        }
    }
};

/*****************
 * delete of memory
 * @param meory
 */
static auto memoryDelete = [&](uint8_t* memory,uint8_t note){
    // check
    for(int i=0;i<MAX_MEMORY;i++){
        if(note == memory[i]){
            memory[i] == 0;
        }
    }
};

/*****************
 * reset of memory
 * @param meory
 */
static auto memoryDelete = [&](uint8_t* memory){
    // check
    for(int i=0;i<MAX_MEMORY;i++){
        memory[i] == 0;
    }
};

/***********************************************************************
 * 描画処理
 ***********************************************************************/
/*****************
 * メモリーreDrow部分
 */
static auto reDrowMemory = [&](){
    for(int x=0;x<LP3_maxXY;x++){
        uint8_t color = (0==memoryCount(mCodeMemory[x]) ? C_MEMORY_ON ? C_MEMORY_OFF);
        Lp3::addDot(mpDispLp3,LP3B_NOMAL,x,LOCATE_Y,color);

    }

};

/*****************
 * キーボードreDrow
 * @param octave    オクターブ
 * @param 
 */
static auto reDrowKey = [&](uint8_t octave,uint8_t locY){
    for(int y=0;y<2;y++){
        for(int x=0;x<LP3_maxXY;x++){
            Lp3::addDot(mpDispLp3,LP3B_NOMAL,x,locY + y,getColor(x,y));
        }
    }
};

/*****************
 * 表示のreDrow
 */
static auto reDrow = [&](){
    // keyMemory表示（１段目）

    // keyBord表示（２段目）
    reDrowKey(mOctave,LOCATE_Y+1);

    // keyBord表示（３段目）
    reDrowKey(mOctave-1,LOCATE_Y+3);

};


/***********************************************************************
* 初期化処理
 ***********************************************************************/
static auto initDrow = [&](){
    Midiglue::Debug::write_log("initDrow",0);
    // Launchpadバッファのクリア
    mpDispLp3->clear();
    // LaunchPadへの送信バッファ設定
    reDrow();
    // 自動送信されないのでLaunchPadへの送信を行う
    outLaunchPad();
};

/*****************
 * LaunchPadからの入力
 * @param x 押されたボタンのX軸(0～8)
 * @param y 押されたボタンのy軸(0～8)
 * @param value value値
 */
static auto pushButtun = [&](uint8_t x,uint8_t y,uint8_t value){
    // Midiglue::Debug::write_log("inputProgramChange", x*10+y);
    // // boxの範囲内であることを確認(縦)
    // if(y < LOCATE_Y || y >= (LOCATE_Y + BOXSIZE_Y)){
    //     return;
    // }
    // // // y軸補正
    // // y -= LOCATE_Y;

    // // boxの範囲内であることを確認(横)
    // if(x<LP3_maxXY){
    //     // LP3への送信
    //     Lp3::addDot(mpDispLp3,LP3B_FLASH,x,y,LP3C_YELLOW);
    // }
    // else { // ボックスの右側[>] が押されている。

    // }

};

// 入力：LaunchPad
static auto inputLaunchPad = [&](MidiPacket packet){

    // LaunchPad制御制限されている場合は無視。
    if(!lpEnable)
    {   return; }

    // // LaunchPadからの入力
    // // 押された場所の取得
    // static uint8_t x;
    // static uint8_t y;
    // if(Lp3::getLocation(packet,&x,&y)){
    //     // 最上段のボタンクリック
    //     reDrow();
    // }else {
    //     // そのほかのボタン
    //     pushButtun(x,y,packet.getControlValue());
    // };


};

/*********************************************
* 割り込みイベント
**********************************************/
// LaunchPadの初期表示
static auto initEvent = Midiglue::make_oneshot_us_event<>(initDrow);

/*********************************************
* 実行処理
**********************************************/

// バッファクリア
mpDispLp3->clear();

// セットアップ
if (@setup){
    // 3秒後に初期表示処理を呼び出す
    initEvent->schedule(3000 * 1000);
}
else if (@in0){ // Enable
    if (in0 == 0) {
        lpEnable = false;
    } else {
        lpEnable = true;
        reDrow();
    }
}
else if (@in1) { // LaunchPadからの入力
    inputLaunchPad(in1);
}

// バッファがあればlaunchpadに送信
if(0<mpDispLp3->size()){
    outLaunchPad();
}
