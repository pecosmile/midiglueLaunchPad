<Comment>
muteDigitakt

TODO: muteがチャンネルコントロールを、パート分送信する必要があるので、
ステータスの変化をチェックして必要分だけ送ろうと思ったが、いったんは全部送る形にする。

note: Digitakt本体の設定でauto channelに設定されているchannelは、
なぜかCCによるミュートができない。

kokou ni-sui@sabaco

<I/O>
input MidiPacket : MIDI入力（Digitakt）
input IntList : mute処理情報(muteBox)
output MidiPacket : MIDI出力(Digitakt)
output IntList : mute処理情報(muteBox)

<Description>
TODO:後で書く

<Parameter>
parameter ChannelTbl = "1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16" : Digitaktのチャネルテーブル。
parameter ReserveAutoCh = false : 最終パート(MIDI H,part 16)を、auto channel 用に使用します。
parameter PatternMute = false : GLOBAL Muteではなく、PATTERN Muteに対して処理を行います。

<Setup>
// Bung設定
${this}( &(Midiglue::__bang) , Midiglue::SETUP );

<Code>

/*****
 * 定数
 *****/
static const bool reserveAutoCh = ${ReserveAutoCh};
static const std::vector<uint8_t> channelTbl{${ChannelTbl}};
static const Midiglue::MIDICCType DTKCC_GMute = (Midiglue::MIDICCType) 94;
static const Midiglue::MIDICCType DTKCC_PMute = (Midiglue::MIDICCType) 110;
static const Midiglue::MIDICCType DTKCC_Mute = ${PatternMute} ? DTKCC_PMute : DTKCC_GMute;


/*****
 * 変数
 *****/
// 出力バッファ(muteBox)
static IntList pOutList = Midiglue::init_default<IntList>();
// 現在のMuteステータス
static uint8_t muteStatus[2];

/*****************
 * Cc入力処理
 */
static auto inputCcPacket = [&](MidiPacket packet){

    // control change以外は処理なし
    if(!packet.isControlChange()){
        return;
    }
    // control change以外は処理なし
    if(packet.getControlNumber() != (uint8_t)DTKCC_Mute){
        return;
    }
    Midiglue::Debug::write_log("inputCcPacket", packet.getControlNumber());
    Midiglue::Debug::write_log("channel", packet.getChannel());

    uint8_t channel = packet.getChannel() - 1;
    uint8_t value = packet.getControlValue();

    uint8_t i = channel / LP3_maxXY;
    uint8_t s = channel % LP3_maxXY;

    uint8_t mask = (0x80 >> s);


    if(value == 0) {
        muteStatus[i] = muteStatus[i] | mask;
    } else {
        muteStatus[i] = muteStatus[i] & ~mask;
    }

    pOutList->clear();
    pOutList->push_back(muteStatus[0]);
    pOutList->push_back(muteStatus[1]);

    out1 = pOutList;

};


if(@setup){
    // フラグの初期化
    muteStatus[0] = 0xff;
    muteStatus[1] = 0xff;
    // muteBoxへ色情報を送信
    pOutList->clear();
    for(int i=0;i<16;i++) {
        uint8_t color = ${PatternMute} ? LP3C_PURPLE : LP3C_GREEN;
        if(reserveAutoCh && i == 15) { color = LP3C_BLACK; }
        pOutList->push_back(color);
    }
    out1 = pOutList;
}else if(@in0) {
    inputCcPacket(in0);
}else if(@in1) {

    // 全データ送信フラグ
    bool flgRefresh = ((3<=in1->size()) && 0<(in1->at(2)&LP3_MB_REFRESH_MUTE));
    // 
    for(uint8_t y=0;y<2;y++){

        // ステータスと入力値のXOR
        uint8_t datXor = muteStatus[y]^in1->at(y);
        // 全データ送信不要かつ、8bitが一致していたらcountinue
        if(!flgRefresh && datXor == 0)
        {   continue;   }
        // 8bit内の処理
        uint8_t mask = 0x80;
        for(uint8_t x=0;x<LP3_maxXY;x++) {
            uint8_t i = y*LP3_maxXY+x;
            // reserve auto ch の場合、最終chは処理しない。
            if(reserveAutoCh && i == 15) { continue; }

            // 全データ送信もしくは、対応bitに変更がある場合のみ送信。
            if(flgRefresh || (0<(mask & datXor)))
            {   // digitaktにccを送る
                uint8_t channel =  channelTbl.at(i);           // チャンネル
                uint8_t dat = (0<(mask & in1->at(y))) ? 0:127;  // on(0)/off(127)
                out0 = MidiPacket::makeControlChange(channel,DTKCC_Mute,dat);
            }

            mask = mask >> 1;
        }
        // ステータスを設定
        muteStatus[y] = in1->at(y);
    }
}