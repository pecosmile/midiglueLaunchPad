<Comment>
muteDigitakt

TODO: muteがチャンネルコントロールを、パート分送信する必要があるので、
ステータスの変化をチェックして必要分だけ送ろうと思ったが、いったんは全部送る形にする。

note: Digitakt本体の設定でauto channelに設定されているchannelは、
なぜかCCによるミュートができない。

kokou ni-sui@sabaco

<I/O>
input MidiPacket : MIDI入力（Digitakt）
input IntList : mute処理情報(muteBox)
output MidiPacket : MIDI出力(Digitakt)
output IntList : mute処理情報(muteBox)

<Description>
TODO:後で書く

<Parameter>
parameter ChannelTbl = "1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16" : Digitaktのチャネルテーブル。
parameter ReserveAutoCh = false : 最終パート(MIDI H,part 16)を、auto channel 用に使用します。
parameter PatternMute = false : GLOBAL Muteではなく、PATTERN Muteに対して処理を行います。
parameter ExtendMuteCh = 16 : Extend Mute に使用するチャンネル（1-16）

<Setup>
// Bung設定
${this}( &(Midiglue::__bang) , Midiglue::SETUP );

<Code>

/*****
 * 定数
 *****/
static const bool reserveAutoCh = ${ReserveAutoCh};
static const std::vector<uint8_t> channelTbl{${ChannelTbl}};
static const Midiglue::MIDICCType DTKCC_GMute = (Midiglue::MIDICCType) 94;
static const Midiglue::MIDICCType DTKCC_PMute = (Midiglue::MIDICCType) 110;
static const Midiglue::MIDICCType DTKCC_Mute = ${PatternMute} ? DTKCC_PMute : DTKCC_GMute;
// Extend Mute A～D
static const uint8_t DTKCC_MuteExMuteA = 1;
static const uint8_t DTKCC_MuteExMuteB = 2;
static const uint8_t DTKCC_MuteExMuteC = 3;
static const uint8_t DTKCC_MuteExMuteD = 4;

// 4bit単位で順番の前後を入れ替える
static const uint8_t tblBitRev[] = {
    0b0000,0b1000,0b0100,0b1100,0b0010,0b1010,0b0110,0b1110,
    0b0001,0b1001,0b0101,0b1101,0b0011,0b1011,0b0111,0b1111,
    };


/*****
 * 変数
 *****/
// 出力バッファ(muteBox)
static IntList pOutList = Midiglue::init_default<IntList>();
// 現在のMuteステータス
static uint8_t muteStatus[2];


/*****************
 * mute CC Packet処理
 */
static auto inputCcMutePacket = [&](MidiPacket packet){

    // Midiglue::Debug::write_log("inputMutePacket", packet.getControlNumber());
    // Midiglue::Debug::write_log("channel", packet.getChannel());

    uint8_t channel = packet.getChannel() - 1;
    uint8_t value = packet.getControlValue();

    uint8_t i = channel / LP3_maxXY;
    uint8_t s = channel % LP3_maxXY;

    uint8_t mask = (0x80 >> s);

    if(value == 0) {
        muteStatus[i] = muteStatus[i] | mask;
    } else {
        muteStatus[i] = muteStatus[i] & ~mask;
    }

    pOutList->clear();
    pOutList->push_back(muteStatus[0]);
    pOutList->push_back(muteStatus[1]);

    out1 = pOutList;

};



/*****************
 * 
 * flgRefresh:全データ送信フラグ
 * muteData[]:muteデータ（２バイト）
 */
static auto extendMute = [&](bool flgRefresh,uint8_t* muteData){

    // 
    for(uint8_t y=0;y<2;y++){

        // ステータスと入力値のXOR
        uint8_t datXor = muteStatus[y] ^ muteData[y];
        // 全データ送信不要かつ、8bitが一致していたらcountinue
        if(!flgRefresh && datXor == 0)
        {   continue;   }
        // 8bit内の処理
        uint8_t mask = 0x80;
        for(uint8_t x=0;x<LP3_maxXY;x++) {
            uint8_t i = y*LP3_maxXY+x;
            // reserve auto ch の場合、最終chは処理しない。
            if(reserveAutoCh && i == 15) { continue; }

            // 全データ送信もしくは、対応bitに変更がある場合のみ送信。
            if(flgRefresh || (0<(mask & datXor)))
            {   // digitaktにccを送る
                uint8_t channel =  channelTbl.at(i);           // チャンネル
                uint8_t dat = (0<(mask & muteData[y])) ? 0:127;  // on(0)/off(127)
                out0 = MidiPacket::makeControlChange(channel,DTKCC_Mute,dat);
            }

            mask = mask >> 1;
        }
        // ステータスを設定
        muteStatus[y] = muteData[y];
    }

};


/**
 * muteの設定変更
 * target:変更対象
 * packet:対象パケット
 */
static auto updateMuteMap = [&](uint8_t* target,uint8_t cc,uint8_t value){
    uint8_t y = 0;
    uint8_t mask = 0;
    // valueの値で更新するmuteの位置を確定させる
    if(cc == (uint8_t)DTKCC_MuteExMuteA) {
        value = value << 4;
        mask = 0x0f;
        y=0;
    } else if(cc == (uint8_t)DTKCC_MuteExMuteB){
        mask = 0xf0;
        y=0;
    } else if(cc == (uint8_t)DTKCC_MuteExMuteC){
        value = value << 4;
        mask = 0x0f;
        y=1;
    } else if(cc == (uint8_t)DTKCC_MuteExMuteD){
        mask = 0xf0;
        y=1;
    }
    // valueに対応したデータを変更する。
    target[y] = (target[y] & mask) | value;
};

/*****************
 * extend mute CC Packet処理
 * ※呼び出す前に、チャンネルのチェックは済ませて下さい。
 */
static auto inputExtendMutePacket = [&](MidiPacket packet){
    Midiglue::Debug::write_log("inputExtendMutePacket", packet.getControlNumber());

    uint8_t value = packet.getControlValue();
    uint8_t cc = packet.getControlNumber();

    // CCが、extend muteの対象でない。または、valueの値が0～15の範囲に無い場合は処理しない
    if( !(value <= 0x0f)
        ||!(    cc == (uint8_t)DTKCC_MuteExMuteA
                || cc == (uint8_t)DTKCC_MuteExMuteB
                || cc == (uint8_t)DTKCC_MuteExMuteC
                || cc == (uint8_t)DTKCC_MuteExMuteD)
    ) {
        return;
    }

    // mute data
    // このデータを変更して、muteを送る。
    uint8_t muteData[2];
    muteData[0] = muteStatus[0];
    muteData[1] = muteStatus[1];

    // muteDataを更新
    updateMuteMap(muteData,cc,value);

    // mute送信
    // TODO:たぶんこれを送らなくてもなんとかなるはず
    extendMute(false,muteData);

    // LaunchPadへの送信
    pOutList->clear();
    pOutList->push_back(muteStatus[0]);
    pOutList->push_back(muteStatus[1]);

    out1 = pOutList;

};



/*****************
 * Cc入力処理
 */
static auto inputCcPacket = [&](MidiPacket packet){

    // control change以外は処理なし
    if(!packet.isControlChange()){
        return;
    }

    // mute CC処理
    if(packet.getControlNumber() == (uint8_t)DTKCC_Mute){
        inputCcMutePacket(packet);
    }

    // Extend mute CC処理
    if(packet.getChannel() == ${ExtendMuteCh} ){
        inputExtendMutePacket(packet);
    }
    else {
        // Midiglue::Debug::write_log("ch", packet.getChannel());
        // Midiglue::Debug::write_log("CC", packet.getControlNumber());

    }


};


if(@setup){
    // フラグの初期化
    muteStatus[0] = 0xff;
    muteStatus[1] = 0xff;
    // muteBoxへ色情報を送信
    pOutList->clear();
    for(int i=0;i<16;i++) {
        uint8_t color = ${PatternMute} ? LP3C_PURPLE : LP3C_GREEN;
        if(reserveAutoCh && i == 15) { color = LP3C_BLACK; }
        pOutList->push_back(color);
    }
    out1 = pOutList;
}else if(@in0) {
    inputCcPacket(in0);
}else if(@in1) {

    // 全データ送信フラグ
    bool flgRefresh = ((3<=in1->size()) && 0<(in1->at(2)&LP3_MB_REFRESH_MUTE));
    // mute data
    // このデータを変更して、muteを送る。
    uint8_t muteData[2];
    muteData[0] = in1->at(0);
    muteData[1] = in1->at(1);
    // mute送信
    extendMute(flgRefresh,muteData);
}