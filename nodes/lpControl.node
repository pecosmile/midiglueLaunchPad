<Comment>
lpControl
LaunchPad描画のSysExを出力します。
起動後に、LaunchPadをProgramer modeに設定します。
詳しくは「Launchpad mini mk3 Programmer’s reference manual」を参照してください。

inputには、３バイト単位で[光点モード][光らせる位置][色]を送ります。
ノードはこの情報をバッファリング。Intervalで設定した間隔で、描画処理します。
このため「Inputに情報を送った直後に描画する」訳ではないことに留意してください。
最大Intervalでした時間だけディレイします。

kokou ni-sui@sabaco

<I/O>
input IntList : 描画情報
output MidiSysEx : 描画情報(LaunchPad mini 3)

<Description>
LaunchPad描画のSysExを出力します。
起動直後にLaunchPadをProgrammer modeに設定します。
LaunchPad接続後にプログラムを起動する必要があります。

<Parameter>
parameter Interval = 30 : 描画する間隔（msec）小さいと、うまく動きません
parameter max_put = 32 : 一度に描画する最大ドット36以上はうまく動きません。

<Setup>
// Bung設定
${this}( &(Midiglue::__bang) , Midiglue::SETUP );

<Code>


/*********************************************
 * 構造体
**********************************************/
// launchpad 明滅セッティング
struct Lp3LightSetting{
    uint8_t mode;       // 明滅モード
    uint8_t locate;     // 位置値
    uint8_t color;      // 色
};

/*********************************************
 * 定数
**********************************************/
/** Launch Pad mini 3 初期化用のバイナリ */
static const uint8_t LP3_INIT_SYSEX[] = { 0xF0,0x00,0x20,0x29,0x02,0x0D,0x00,0x7F,0xF7,};
static const uint32_t LP3_INIT_SYSEX_SIZE = 9u;
/** sysEx ヘッダ */
// static const std::vector<uint8_t> LP3_exh = { 0xf0,0x00,0x20,0x29,0x02,0x0d,0x03,};
static const uint8_t LP3_exh[] = { 0xf0,0x00,0x20,0x29,0x02,0x0d,0x03,};
static const uint8_t LP3_exh_length = 7;
/** sysEx フッター */
static const uint8_t LP3_exf[] = { 0x7f };
static const uint8_t LP3_exf_length = 1;

// 送信バッファのサイズ
static const uint16_t LP3_BUFF_MAX = ${max_put}*3 + LP3_exh_length + LP3_exf_length;

/** 描画情報を保持するバッファ */
static IntList pLpDots = Midiglue::init_default<IntList>();

static const uint8_t MAX_RING_BUFFER= 128;     // バッファサイズ
static Lp3LightSetting mLp3LingBuff[MAX_RING_BUFFER];   // バッファ
static uint8_t mLbWrite = 0;    // 書き込み位置
static uint8_t mLbRead = 0;     // 読み込み位置

/** 送信バッファ */
//static std::vector<uint8_t> mLp3Buff;
static uint8_t mLp3Buff[LP3_BUFF_MAX];
static uint32_t mLp3BuffCount = 0;


/** SysEx送信用 */
static MidiSysEx sysex{0u, nullptr};

/*********************************************
 * 関数
**********************************************/
/*****************
 * 送信バッファにコピー
 */
static auto setSendBuff = [&](const uint8_t* pBuff,const uint16_t size){
    // 最大値を超えては送信できないです。
    if(mLp3BuffCount + size > LP3_BUFF_MAX){
        Midiglue::Debug::write_log("!!setSendBuff:BO!!:",mLp3BuffCount + size);
        mLp3BuffCount = 0;
        return;
    }
    // バッファコピー
    memcpy(&(mLp3Buff[mLp3BuffCount]),pBuff,size);

    // カウンタ
    mLp3BuffCount += size;
};


/*****************
 * リングバッファが空
 */
static auto lbIsEmpty = [&]() -> bool{
    return(mLbWrite == mLbRead);
};

/*****************
 * リングバッファが一杯
 */
static auto lbIsFull = [&]() -> bool{
    return((mLbWrite+1)%MAX_RING_BUFFER == mLbRead);
};

/*****************
 * リングバッファ追加
 */
static auto lbAddData = [&](uint8_t mode,uint8_t locate,uint8_t color){
    // 既にリングバッファが一杯
    if(lbIsFull()){
        Midiglue::Debug::write_log("!!lbAddData:BO!!:",mLbWrite);
        Midiglue::Debug::write_log(" :",mLbRead);
        return;
    }
    // 一杯で無いなら追加可能
    mLp3LingBuff[mLbWrite].mode = mode;
    mLp3LingBuff[mLbWrite].locate = locate;
    mLp3LingBuff[mLbWrite].color = color;
    // ポインタを進める
    mLbWrite = (mLbWrite+1)%MAX_RING_BUFFER;
};

/*****************
 * リングバッファから値を送信
 */
static auto drowLaunchPad = [&](){

    // リングバッファが空
    if(lbIsEmpty()){
        return;
    }

    mLp3BuffCount = 0;
    setSendBuff(LP3_exh,LP3_exh_length);

    // pLpDotsに持っているバッファを３つ単位で送信する
    int count = ${max_put};
    uint8_t buff[3];
    while(!lbIsEmpty() && count > 0) {
        // 送信バッファを設定
        buff[0] = mLp3LingBuff[mLbRead].mode;
        buff[1] = mLp3LingBuff[mLbRead].locate;
        buff[2] = mLp3LingBuff[mLbRead].color;
        setSendBuff(buff,3);
        // ポインタを進める
        mLbRead = (mLbRead+1)%MAX_RING_BUFFER;
        count--;
    }
    setSendBuff(LP3_exf,LP3_exf_length);

    // SysExとして送信
    sysex.len = mLp3BuffCount;
    sysex.buf = mLp3Buff;

    out0 = sysex;
};



/*****************
 * LaunchPad初期化
 * LaunchPad mini mk3 をプログラマモードに
 * するためのSysExを送る
 */
// 
static auto initLaunchPad = [&](){
    // SysExとして送信
    sysex.len = LP3_INIT_SYSEX_SIZE;
    sysex.buf = LP3_INIT_SYSEX;

    out0 = sysex;
};

/*********************************************
* 割り込みイベント
**********************************************/
// 初期化イベント
static auto initEvent = Midiglue::make_oneshot_us_event<>(initLaunchPad);
// 描画イベント
static auto drowEvent = Midiglue::make_cyclic_us_event<>(drowLaunchPad);

// セットアップ
if (@setup){
    // 初期表示イベント設定（1回のみ）
    initEvent->schedule(1000 * 1000);
    // 描画イベント（定期的に呼び出し）
    drowEvent->schedule(${Interval} * 1000);
}
else if (@in0){
    // 受信したバッファを一時保存
    // TODO:たぶんvectorの結合あるんじゃないかな。
    for(auto itr = in0->begin(); itr < in0->end(); itr+=3 ) {
        lbAddData(*itr,*(itr+1),*(itr+2));
    }

}

