<Comment>
faderBox
フェーダーを設定する。

colorに使える設定は以下
RED,YELLOW,YGREEN,GREEN,LBLUE,BLUE,BPURPLE,PURPLE

kokou ni-sui@sabaco

<I/O>
input Int : LaunchPad制御（0=Disable）
input MidiPacket : launchpadからの入力
input Int : barGageBoxからの入力
output MidiPacket : 出力1
output MidiPacket : 出力2
output IntList : 描画情報。lpControlへの接続します。


<Description>
CCを出力するフェーダです。
settingは出力先,ch,ccNumber,colorをカンマ区切りで設定出来ます。
なんかコンパイルエラーが出たら、この値が間違ってると思って下さい。

colerに設定できる色は以下
RED,YELLOW,YGREEN,GREEN,LBLUE,BLUE,BPURPLE,PURPLE,ORANGE,PINK


※ノード単体では動きません。main_template.cppに、専用の定数・クラスを設定する必要があります。


<Parameter>
parameter Locate = 0 : 描画位置(0-6)
parameter Height = 4 : 描画範囲(1-8)
parameter Setting1 = "1,1,0,YELLOW" : (1)out,ch,ccNumber,Color
parameter Setting2 = "1,2,0,YELLOW" : (2)out,ch,ccNumber,Color
parameter Setting3 = "1,3,0,YELLOW" : (3)out,ch,ccNumber,Color
parameter Setting4 = "1,4,0,YELLOW" : (4)out,ch,ccNumber,Color
parameter Setting5 = "1,5,0,YELLOW" : (5)out,ch,ccNumber,Color
parameter Setting6 = "1,6,0,YELLOW" : (6)out,ch,ccNumber,Color
parameter Setting7 = "1,7,0,YELLOW" : (7)out,ch,ccNumber,Color
parameter Setting8 = "1,8,0,YELLOW" : (8)out,ch,ccNumber,Color


<Setup>
// Bung設定
${this}( &(Midiglue::__bang) , Midiglue::SETUP );

<Code>

/*********************************************
 * 定数
**********************************************/
static const uint8_t LOCATE_Y = ${Locate};      // 基準位置（縦）
static const uint8_t BOXSIZE_X = 8;             // サイズ（横）
static const uint8_t BOXSIZE_Y = ${Height};     // サイズ（縦）

// 色設定
static const uint8_t RED = LP3C_RED;
static const uint8_t YELLOW = LP3C_YELLOW;
static const uint8_t YGREEN = LP3C_YGREEN;
static const uint8_t GREEN = LP3C_GREEN;
static const uint8_t LBLUE = LP3C_LBLUE;
static const uint8_t BLUE = LP3C_BLUE;
static const uint8_t BPURPLE = LP3C_BPURPLE;
static const uint8_t PURPLE = LP3C_PURPLE;
static const uint8_t ORANGE = LP3C_ORANGE;
static const uint8_t PINK = LP3C_PINK;

// 色指定（相対）
// FADERの額
static const int CR_LEFT    = +0;   // 左端
static const int CR_MIDDLE  = +0;   // 0～99
static const int CR_HIGH    = -1;    // 100～127
static const int CR_BACK    = +2;   // 背景

// 長押し判定する拍数
static const uint8_t LONG_PRESS = 16;

// ステータス
static const uint8_t ST_IDLE    = 0;    // アイドル
static const uint8_t ST_MOVING  = 1;    // 移動中


// 色指定
static const int TBL_COLOR[]={
    CR_LEFT,
    CR_MIDDLE,
    CR_MIDDLE,
    CR_MIDDLE,
    CR_MIDDLE,
    CR_MIDDLE,
    CR_HIGH,
    CR_HIGH,
};

// fader value
static const std::vector<uint8_t> TBL_VALUE{
    0,              // CR_LEFT
    20,             // CR_MIDDLE
    40,             // CR_MIDDLE
    60,             // CR_MIDDLE
    80,             // CR_MIDDLE
    100,            // CR_MIDDLE
    114,            // CR_HIGH
    127,            // CR_HIGH
};

// フェーダー設定
struct FaderSetting{
    uint8_t out;        // channel
    uint8_t ch;         // channel
    uint8_t ccNumber;   // cc number
    uint8_t color;      // color       
};

// フェーダー状態
struct FaderParam{
    uint8_t value;          // 現在の値
    uint8_t valueGaul;      // fader移動のGaul
    Int startBarLine;       // fader開始時の位置
    uint8_t startValue;     // fader開始時の位置
};


/*********************************************
 * 変数
**********************************************/
// Launchpad 描画情報
static IntList mpDispLp3 = Midiglue::init_default<IntList>();
// LaunchPad入出力許可フラグ
static bool lpEnable = true;

// 残りのStep数
static Int mLeftBarLine = 0;

// Fader設定
static FaderSetting mFaderSetting[] = {
    {${Setting1}},  // fader 1
    {${Setting2}},  // fader 2
    {${Setting3}},  // fader 3
    {${Setting4}},  // fader 4
    {${Setting5}},  // fader 5
    {${Setting6}},  // fader 6
    {${Setting7}},  // fader 7
    {${Setting8}},  // fader 8
};

// 各値のValue値
static FaderParam mFaderParam[8] = {
    {100,100,0},    // fader 1
    {100,100,0},    // fader 2
    {100,100,0},    // fader 3
    {100,100,0},    // fader 4
    {100,100,0},    // fader 5
    {100,100,0},    // fader 6
    {100,100,0},    // fader 7
    {100,100,0},    // fader 8
};

/*********************************************
 * 関数
**********************************************/
/***********************************************************************
 * 共通処理
 ***********************************************************************/

/*****************
 * フェーダーのステータスを取得する。
 * @param param フェーダーのパラメータ構造体
 * @return ステータス
 */
static auto getStatus = [&](FaderParam* param) -> uint8_t {
    // startBarLineが設定されている場合はフェーダー移動中
    if(param->startBarLine == 0){
        return(ST_IDLE);
    }
    return(ST_MOVING);
};


/*****************
 * Launch pad への送信
 * @param data  出力したい描画情報
 * @param y 押されたボタンのy軸(0～1)
 */
static auto outLaunchPad = [&](){
    if(lpEnable)
    {
        // 出力
        out2 = mpDispLp3;
    }
};


/*****************
 * フェーダーのreDrow(value指定なし)
 * @param faderNo フェーダー番号(0～8)
 */
static auto reDrowFader = [&](uint8_t faderNo){
    // y軸によるデータ取得
    uint8_t ch = mFaderSetting[faderNo].ch;                   // channel
    // uint8_t ccNumber = mFaderSetting[faderNo].ccNumber;    // cc number
    uint8_t color = mFaderSetting[faderNo].color;             // color

    for(int i=0;i<8;i++){
        // valueに合った箇所まで色を付ける
        int add = (TBL_VALUE[i] <= mFaderParam[faderNo].value) ? TBL_COLOR[i]:CR_BACK;
        Lp3::addDot(mpDispLp3,LP3B_NOMAL,i,LOCATE_Y + faderNo,color+add);
    }
};

/*****************
 * Midiへの送信
 * @param 
 * @param y 押されたボタンのy軸(0～1)
 */
static auto outMidi = [&](uint8_t faderNo,uint8_t value){
    // パケット作成
    MidiPacket pacekt = MidiPacket::makeControlChange(
        mFaderSetting[faderNo].ch,(Midiglue::MIDICCType) mFaderSetting[faderNo].ccNumber,value);

    //出力先によって値を変える
    if(mFaderSetting[faderNo].out == 1){
        out0 = pacekt;
    } else if(mFaderSetting[faderNo].out == 2) {
        out1 = pacekt;
    }
};

/*****************
 * 表示のreDrow
 */
static auto reDrow = [&](){
    for(int y=0;y<BOXSIZE_Y;y++){
        reDrowFader(y);        
    }
};

/***********************************************************************
* 初期化処理
 ***********************************************************************/
static auto initDrow = [&](){
    // Launchpadバッファのクリア
    mpDispLp3->clear();
    // LaunchPadへの送信バッファ設定
    reDrow();
    // 自動送信されないのでLaunchPadへの送信を行う
    outLaunchPad();
};

/***********************************************************************
 * 初期化処理入力
 ***********************************************************************/
/*****************
 * フェーダーの状態リセット（IDLEにする）
 * @param x 押されたボタンのX軸(0～7)
 * @param faderNo フェーダー番号(0～8)
 * @param value value値
 */
static auto resetFaderParam = [&](uint8_t faderNo){
    // 移動用のパラメータをリセット
    mFaderParam[faderNo].startBarLine = 0;
    mFaderParam[faderNo].valueGaul = 0;
    mFaderParam[faderNo].startValue = 0;
    // Midiglue::Debug::write_log("resetFaderParam:", mFaderParam[faderNo].value);

};



/*****************
 * フェーダー入力（アイドル時）
 * @param x 押されたボタンのX軸(0～7)
 * @param faderNo フェーダー番号(0～8)
 * @param value value値
 */
static auto pushButtunInIdle = [&](uint8_t x,uint8_t faderNo,uint8_t value){
    // Midiglue::Debug::write_log("pushButtunInIdle", value);

    // アイドル状態でボタンoffは動作不要
    if(value == 0){
        return;
    }

    // (例外)BarGageBoxの値 = 0 の場合直接値を変更する
    if(mLeftBarLine == 0){
        mFaderParam[faderNo].value = TBL_VALUE[x];
        resetFaderParam(faderNo);
        outMidi(faderNo,mFaderParam[faderNo].value);
        // 描画
        reDrowFader(faderNo);
        return;
    }

    // 開始時点の残BarLine,valueを記憶
    mFaderParam[faderNo].startBarLine = mLeftBarLine;
    mFaderParam[faderNo].startValue = mFaderParam[faderNo].value;
    // ゴールとして指定しているValueを設定
    mFaderParam[faderNo].valueGaul = TBL_VALUE[x];

    // Midiglue::Debug::write_log("startBarLine:", mFaderParam[faderNo].startBarLine);
    // Midiglue::Debug::write_log("startValue:", mFaderParam[faderNo].startValue);
    // Midiglue::Debug::write_log("valueGaul:", mFaderParam[faderNo].valueGaul);


};

/*****************
 * フェーダー入力（フェーダー移動中）
 * @param x 押されたボタンのX軸(0～8)
 * @param faderNo フェーダー番号(0～8)
 * @param value value値
 */
static auto pushButtunInMove = [&](uint8_t faderNo,uint8_t value){
    // Midiglue::Debug::write_log("pushButtunInMove", value);

    FaderSetting* setting = &mFaderSetting[faderNo];
    FaderParam* param = &mFaderParam[faderNo];
    // アイドル状態でボタンoffは動作不要
    if(value == 0){
        // 一定期間押しっぱなしだったら無効
        if((param->startBarLine - mLeftBarLine) < LONG_PRESS){
            // valueをゴールに設定
            param->value = param->valueGaul;
            // 移動用のパラメータをリセット
            resetFaderParam(faderNo);
            // CC値を出力
            outMidi(faderNo,param->value);
            // 描画
            reDrowFader(faderNo);
        }
    } else {
        // 移動用のパラメータをリセット(現在位置で止める)
        param->startBarLine = 0;
        param->valueGaul = 0;

    }
};

/*****************
 * フェーダー操作
 * @param x 押されたボタンのX軸(0～8)
 * @param faderNo フェーダー番号(0～8)
 * @param value value値
 */
static auto pushButtunFader = [&](uint8_t x,uint8_t faderNo,uint8_t value){
    if(getStatus(&mFaderParam[faderNo]) == ST_IDLE){
        pushButtunInIdle(x,faderNo,value);
    } else {
        pushButtunInMove(faderNo,value);
    }
};

/*****************
 * LaunchPadからの入力
 * @param x 押されたボタンのX軸(0～8)
 * @param y 押されたボタンのy軸(0～8)
 * @param value value値
 */
static auto pushButtun = [&](uint8_t x,uint8_t y,uint8_t value){
    // Midiglue::Debug::write_log("inputProgramChange", x*10+y);
    // boxの範囲内であることを確認(縦)
    if(y < LOCATE_Y || y >= (LOCATE_Y + BOXSIZE_Y)){
       return;
    }
    // // y軸補正
    y -= LOCATE_Y;

    // boxの範囲内であることを確認(横)
    if(x<LP3_maxXY){
        pushButtunFader(x,y,value);
    }
    else { // ボックスの右側[>] が押されている。

    }

};

// 入力：LaunchPad
static auto inputLaunchPad = [&](MidiPacket packet){

    // LaunchPad制御制限されている場合、onイベントは無視する。
    // ※押しながら切り替えられる可能性があるため、offイベントは受ける
    if(!lpEnable && 0 < packet.getControlValue())
    {   return; }

    // LaunchPadからの入力
    // 押された場所の取得
    static uint8_t x;
    static uint8_t y;
    if(Lp3::getLocation(packet,&x,&y)){
        // 最上段のボタンクリック
        reDrow();
    }else {
        // そのほかのボタン
        pushButtun(x,y,packet.getControlValue());
    };


};


/*****************
 * 小節位置の計算
 */
static auto getTblValuePosition = [&](uint8_t value) -> uint8_t {
    uint8_t ret = *(TBL_VALUE.begin()); 
    for(auto itr=TBL_VALUE.begin();itr!=TBL_VALUE.end();itr++++) {
        if(*itr > value){
            break;
        }
        ret = *itr;
    }
    return(ret);
};

/*****************
 * 小節位置の計算
 */
static auto barLineCalc = [&](int gapValue,Int a,Int b) -> int {
    return(gapValue * ((float)(b - a) / b));
};

/*****************
 * フェーダー移動処理
 */
static auto faderMoveOne = [&](uint8_t faderNo){

    // パラメータ
    FaderParam* param = &mFaderParam[faderNo];

    // 移動状態でない場合は処理不要
    if(ST_MOVING != getStatus(param)){
        return;
    }

    // 計算値取得
    int newValue = param->startValue + 
        barLineCalc(param->valueGaul - param->startValue,mLeftBarLine,param->startBarLine);

    // 値に変化がある場合のみMidiを送信する
    if(newValue != param->value){
        // Midiglue::Debug::write_log("midiOut", newValue);
        outMidi(faderNo,newValue);
        // 表示に影響がある場合は、再描画を行う。
        if(getTblValuePosition(newValue) != getTblValuePosition(param->value)){
            // 変更後の値を記憶
            param->value = newValue;
            //
            reDrowFader(faderNo);
        }
        // 変更後の値を記憶
        param->value = newValue;
    }

    // 
    // フェーダー移動を完了。
    if(mLeftBarLine <= 0){
        Midiglue::Debug::write_log("**FaderEnd:", mFaderParam[faderNo].value);
        resetFaderParam(faderNo);
    }


};

/*****************
 * フェーダー移動処理
 */
static auto faderMove = [&](){
    for(int y=0;y<BOXSIZE_Y;y++){
        faderMoveOne(y);        
    }
};


/*********************************************
* 割り込みイベント
**********************************************/
// LaunchPadの初期表示
static auto initEvent = Midiglue::make_oneshot_us_event<>(initDrow);

/*********************************************
* 実行処理
**********************************************/

// バッファクリア
mpDispLp3->clear();

// セットアップ
if (@setup){
    // 3秒後に初期表示処理を呼び出す
    initEvent->schedule(3000 * 1000);
}
else if (@in0){ // Enable
    if (in0 == 0) {
        lpEnable = false;
    } else {
        lpEnable = true;
        reDrow();
    }
}
else if (@in1) { // LaunchPadからの入力
    inputLaunchPad(in1);
}
else if (@in2) { // varGageBoxからの入力
    mLeftBarLine = in2;

    if(0 == mLeftBarLine%20){
        Midiglue::Debug::write_log("mLeftBarLine1", in2);
        Midiglue::Debug::write_log("mLeftBarLine2", mLeftBarLine);
    }

    faderMove();
}

// バッファがあればlaunchpadに送信
if(0<mpDispLp3->size()){
    outLaunchPad();
}
