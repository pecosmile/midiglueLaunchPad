<Comment>
packetFilter
    NoteOn/NoteOff/CCを設定値によって振り分ける

kokou ni-sui@sabaco

<I/O>
input MidiPacket : MIDI入力（Digitakt）
output MidiPacket : MIDI出力(true)(Digitakt)
output MidiPacket : MIDI出力(false)(Digitakt)

<Description>
パケットを振り分ける
NoteOn/NoteOff/CCを設定値によって振り分けます

<Parameter>
parameter flagCC = true : CC
parameter flagNoteOn = true : NoteOn
parameter flagNoteOff = true : NoteOff
parameter ChannelTbl = "1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16" : フィルタリング対象のチャンネル　(1-16の値をカンマ区切りで指定)


<Setup>

<Code>

/*****
 * 定数
 *****/
static const std::vector<uint8_t> channelTbl{${ChannelTbl}};


/*********
 * パケット振り分け
 ********/
 static auto sendPacket = [&](bool outFlag,MidiPacket packet){
     if(outFlag){
        out0 = packet;
     } else {
        out1 = packet;
     }
};

/*********
 * チャンネル判定
 ********/
 static auto isTargetCh = [&](uint8_t ch) -> bool {

    bool ret = false;
    // 指定されたチャンネルと一致があればtrue
    for(auto itr = channelTbl.begin(); itr != channelTbl.end(); ++itr) {
        if(ch == *itr){
            ret = true;
            break;
        }
    }
    // 指定されたチャンネルと一致なければfalse
    return(ret);
};



/*********************************************
* 実行処理
**********************************************/


if(@in0) {

    if(isTargetCh(in0.getChannel())){
        // フィルタ対象のch
        if(in0.isControlChange()){
            // CC
            sendPacket(${flagCC},in0);

        } else if(in0.isNoteOn()){
            // NoteOn
            sendPacket(${flagNoteOn},in0);

        } else if(in0.isNoteOff()){
            // NoteOn
            sendPacket(${flagNoteOff},in0);

        }
    } else {
        out1 = packet;
    }

}