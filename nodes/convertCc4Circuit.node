<Comment>
convertCc4Circuit
    circuitへのパケットの変換・フィルター

    

kokou ni-sui@sabaco

<I/O>
input MidiPacket : MIDI入力
input Int : barGageBoxから取得する現在位置クロック
input Int : サブベースのノート
output MidiPacket : MIDI出力(for circuit)

<Description>

<Parameter>
parameter prgTargetCh = 16 : ターゲットとするチャンネル
parameter subbassChannel = 1 : sub bass のchannel番号
parameter comvCc2Prg = 5 : プログラムチェンジに変換するCC番号(0=off)
parameter subControlCc = 6 : subControlCc CC番号(0=off)


<Setup>

<Code>

/*********************************************
 * 定数
**********************************************/
static const uint8_t DRUM_CH = 10;              // ドラムのチャンネル
static const uint8_t DRUM_NOTE = 60;            // ドラムのノート
static const uint8_t SUB_BASE_VELOCITY = 127;   // サブベースのベロシティ
static const uint8_t SUB_BASS_NOTE = 60;        // サブベースのノート
static const uint8_t SBCC_KICKBASS_ON = 1;      // サブベースCC：キック・ベースON
static const uint8_t SBCC_KICK_ONLY = 2;        // サブベースCC：キックのみ
static const uint8_t SBCC_BASS_ONLY = 3;        // サブベースCC：ベースのみ
static const uint8_t SLDRCC_Synth1_UP = 10;     // スライダCC：Synth1 Up
static const uint8_t SLDRCC_Synth1_DOWN = 11;   // スライダCC：Synth1 Down
// CCSliderステータス
static const uint8_t SLDRCC_ST_IDLE = 0;    // アイドル
static const uint8_t SLDRCC_ST_CCWAIT = 1;    // CC Wait
static const uint8_t SLDRCC_ST_EXECUTE = 2;    // 実行


/*********************************************
 * 変数
**********************************************/
static uint8_t mSubBassNote = SUB_BASS_NOTE;
static bool mEnableSubBass = true;
static bool mEnableSubKick = true;

static uint8_t mSldCcNumber = 0;        // 対象とするCC Number
static uint8_t mSldCcValue = 0;         // 開始|終了の値
static uint8_t mSldCcOutValue = 0;      // 最後に出力した値
static uint8_t mSldCcStart = 0;         // 開始位置
static uint8_t mSldCcKind = 0;          // 種別
static uint8_t mSldCcStatus = 0;        // ステータス

static uint8_t mClockCount = 0;          // クロックカウント

/*********
 * sub control change
 ********/
 static auto subControlCcPacket = [&](MidiPacket packet){
     uint8_t ctrlNo = (uint8_t) packet.getControlNumber();
     uint8_t ctrlValue = (uint8_t) packet.getControlNumber();

    switch(ctrlValue){
    case SBCC_KICKBASS_ON:  // キック・ベース ON
        mEnableSubKick = true;
        mEnableSubBass = true;
        break;
    case SBCC_KICK_ONLY:    // キックのみ
        mEnableSubKick = true;
        mEnableSubBass = false;
        break;
    case SBCC_BASS_ONLY:    // ベースのみ
        mEnableSubKick = false;
        mEnableSubBass = true;
        break;
    case SLDRCC_Synth1_UP:    // Synth1 Up
    case SLDRCC_Synth1_DOWN:    // Synth1 Down
        // 対象のCC値を待機
        mSldCcKind = ctrlValue; 
        mSldCcStatus = SLDRCC_ST_CCWAIT;
        break;
    }

 };

/*********
 * CCの値に対しての処理
 ********/
 static auto otherCcFunction = [&](MidiPacket packet){

     if(mSldCcStatus == SLDRCC_ST_CCWAIT){
        // Wait状態になってから最初に得たCCと、そのタイミングを取得する。
        mSldCcNumber = packet.getControlNumber();
        mSldCcValue = packet.getControlValue();
        mSldCcStart = mClockCount;
     } else if(mSldCcStatus == SLDRCC_ST_EXECUTE 
        && mSldCcNumber == packet.getControlNumber()){
        // Slider実行中に、同CCを無視する
     } else {
        // 上記以外はスルー
        out0 = packet;

     }
 };


/*********
 * 16ch program change 変更
 ********/
 static auto convert16CcPacket = [&](MidiPacket packet){
     uint8_t ctrlNo = packet.getControlNumber();
     if(ctrlNo == ${comvCc2Prg}){
        // progNo
        uint8_t prgNo = (uint8_t) packet.getControlValue();
        // programChangeに変換
        auto packet = MidiPacket::makeProgramChange(${prgTargetCh},prgNo);
        // midi outへの出力
        out0 = packet;
     }else if(ctrlNo == ${subControlCc}){
        subControlCcPacket(packet);
     } else {
        // 上記以外のパケットは、更にCCSliderの処理を行う。 
        otherCcFunction(packet);
     }
};

/*********
 * Note処理
 ********/
static auto noteFunction = [&](MidiPacket packet){

    // channel が一致する場合はsub bass 送信
    if(packet.getChannel() == DRUM_CH && packet.getNoteNumber() == DRUM_NOTE){
        // note ON | OFF
        uint8_t velocity = packet.isNoteOff() ? 0 : SUB_BASE_VELOCITY;
        // sub base用のnote送信
        // ※Note Off はステータス無関係に送信する（音が止まらなくなる為）
        if(mEnableSubBass || packet.isNoteOff()){
            out0 = MidiPacket::makeNote(${subbassChannel},mSubBassNote,velocity);
        }
        // kick用のnote送信
        if(mEnableSubKick || packet.isNoteOff()){
            out0 = packet;
        }
    } else{
        // Noteそのものはスルーする
        out0 = packet;
    }

};

/*********
 * clock処理
 ********/
static auto clockFunction = [&](Int clock){
    // mClockCount = clock;

    // // 実行状態でないなら無視（何も送らない
    // if(mSldCcStatus != SLDRCC_ST_EXECUTE){
    //     return;
    // }

    // // 基準値
    // uint8_t value = mSldCcValue;

    // // clock は、小節開始が最大で、小節終わりに向けてカウントダウンしていく。
    // // つまり mSldCcValue * (clock/mSldCcStart) は、開始から終わりにむかって減退していく
    // value *= clock;
    // value /= mSldCcStart;

    // // upだった場合は状態を反転(終わりに向かって増加していく)
    // if(mSldCcKind == SLDRCC_Synth1_UP){
    //     value = mSldCcValue - value;
    // }

    // // 前回送ったvalueから変化があった場合にのみ送信
    // if(mSldCcOutValue != value){
    //     // CC を出力
    //     out0 = MidiPacket::makeControlChange(${prgTargetCh},mSldCcNumber,value);
    //     mSldCcOutValue = value;
    // }


};


/*********************************************
* 実行処理
**********************************************/
if(@in0) {

    if(in0.getChannel() == ${prgTargetCh} && in0.isControlChange()){
        // 指定チャンネルのCCのみ処理を行う
        convert16CcPacket(in0);
    } else if( in0.isNote() ){
        noteFunction(in0);
    } else if( in0.isProgramChange()){
        // programChangeは排除
    } else {
        out0 = in0;
    }

}

if(@in1) {

}

if(@in2) {
    // subbassの音程を変えるときにはnote offを送る（音が止まらなくなる為）
    out0 = MidiPacket::makeNote(${subbassChannel},mSubBassNote,0);
    mSubBassNote = in2;
}